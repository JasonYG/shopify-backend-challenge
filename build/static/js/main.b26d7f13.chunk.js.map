{"version":3,"sources":["components/UploadImagePage/index.tsx","components/SellImagePage/index.tsx","components/BuyImagePage/index.tsx","App.tsx","index.tsx"],"names":["UploadImagePage","useState","picture","setPicture","name","setName","price","setPrice","username","setUsername","toastActive","setToastActive","handleSave","a","fetch","method","headers","Accept","body","JSON","stringify","encoding","response","json","image","saveSuccessToast","Toast","content","onDismiss","active","duration","Frame","Card","title","sectioned","withIcon","buttonText","length","onChange","_","pictures","pop","imgExtension","maxFileSize","style","textAlign","src","maxWidth","Form","onSubmit","FormLayout","TextField","value","label","type","helpText","Button","submit","disabled","SellImagePage","successToastActive","setSuccessToastActive","soldToastActive","setSoldToastActive","images","setImages","displayModal","setDisplayModal","s3Url","currentImage","setCurrentImage","updatedPrice","setUpdatedPrice","handleSubmit","filteredImages","filter","status","toggleSuccessActive","toggleSoldToast","toggleDisplayModal","handleSubmitChangePrice","updatedImage","updatedImages","map","handleSellImage","imageId","_id","returnImage","noImagesToast","successToast","soldToast","Modal","open","onClose","Section","MediaCard","description","portrait","primaryAction","onAction","secondaryAction","width","height","objectFit","objectPosition","BuyImagePage","useEffect","handleBuyImage","Banner","App","currentTab","setCurrentTab","tab","tabs","findIndex","pathname","window","location","id","accessibilityLabel","panelId","AppProvider","i18n","translations","Page","Tabs","selected","onSelect","exact","path","component","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b26d7f13.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Form,\r\n  FormLayout,\r\n  TextField,\r\n  Button,\r\n  Toast,\r\n  Frame,\r\n} from \"@shopify/polaris\";\r\nimport ImageUploader from \"react-images-upload\";\r\n\r\nconst UploadImagePage = () => {\r\n  const [picture, setPicture] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [toastActive, setToastActive] = useState(false);\r\n  const onDrop = (_: File[], pictures: string[]) => {\r\n    // Set the most recent picture\r\n    setPicture(pictures.pop() || \"\");\r\n  };\r\n  const handleNameChange = (name: string) => {\r\n    setName(name);\r\n  };\r\n  const handlePriceChange = (price: string) => {\r\n    setPrice(price);\r\n  };\r\n  const handleUsernameChange = (username: string) => {\r\n    setUsername(username);\r\n  };\r\n  const handleSave = async () => {\r\n    // Upload image and price to backend\r\n    const response = await fetch(\"/api/upload\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        picture: { name, encoding: picture },\r\n        price,\r\n        username,\r\n      }),\r\n    });\r\n    const imageObject = await response.json();\r\n    if (imageObject.image) {\r\n      // Trigger success toast\r\n      setToastActive(true);\r\n      // Remove existing image from state\r\n      setPicture(\"\");\r\n      setName(\"\");\r\n      setPrice(\"\");\r\n      setUsername(\"\");\r\n    }\r\n  };\r\n  const toggleActive = () => {\r\n    setToastActive((active) => !active);\r\n  };\r\n  const saveSuccessToast = toastActive ? (\r\n    <Toast\r\n      content=\"Successfully saved image!\"\r\n      onDismiss={toggleActive}\r\n      duration={2000}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <Frame>\r\n      <br />\r\n      <Card title=\"Upload an image to sell\" sectioned>\r\n        <ImageUploader\r\n          withIcon={true}\r\n          buttonText={\r\n            picture.length === 0 ? \"Choose images\" : \"Choose another image\"\r\n          }\r\n          onChange={onDrop}\r\n          imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\"]}\r\n          maxFileSize={5242880}\r\n        />\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <img src={picture} style={{ maxWidth: \"100%\" }} />\r\n        </div>\r\n        {picture.length > 0 && (\r\n          <Form onSubmit={handleSave}>\r\n            <FormLayout>\r\n              <TextField\r\n                value={username}\r\n                onChange={handleUsernameChange}\r\n                label=\"Username\"\r\n                type=\"text\"\r\n                helpText={\r\n                  <span>\r\n                    Enter in your username. You will need this to sell your\r\n                    image!\r\n                  </span>\r\n                }\r\n              />\r\n              <TextField\r\n                value={name}\r\n                onChange={handleNameChange}\r\n                label=\"Name\"\r\n                type=\"text\"\r\n                helpText={<span>Choose a name for your image.</span>}\r\n              />\r\n              <TextField\r\n                value={price}\r\n                onChange={handlePriceChange}\r\n                label=\"Price\"\r\n                type=\"number\"\r\n                helpText={<span>Choose a price to sell your image.</span>}\r\n              />\r\n              <Button\r\n                submit\r\n                disabled={\r\n                  price.length === 0 ||\r\n                  name.length === 0 ||\r\n                  username.length === 0\r\n                }\r\n              >\r\n                Save\r\n              </Button>\r\n            </FormLayout>\r\n          </Form>\r\n        )}\r\n      </Card>\r\n      {saveSuccessToast}\r\n    </Frame>\r\n  );\r\n};\r\nexport default UploadImagePage;\r\n","import { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Form,\r\n  FormLayout,\r\n  TextField,\r\n  Button,\r\n  Toast,\r\n  Frame,\r\n  MediaCard,\r\n  Modal,\r\n} from \"@shopify/polaris\";\r\nimport ImageUploader from \"react-images-upload\";\r\n\r\nconst SellImagePage = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [toastActive, setToastActive] = useState(false);\r\n  const [successToastActive, setSuccessToastActive] = useState(false);\r\n  const [soldToastActive, setSoldToastActive] = useState(false);\r\n  const [images, setImages] = useState<any[]>([]);\r\n  const [displayModal, setDisplayModal] = useState(false);\r\n  const [currentImage, setCurrentImage] = useState({\r\n    name: \"\",\r\n    username: \"\",\r\n    price: \"\",\r\n    s3Url: \"\",\r\n  });\r\n  const [updatedPrice, setUpdatedPrice] = useState(\"\");\r\n  const handleUsernameChange = (username: string) => {\r\n    setUsername(username);\r\n  };\r\n  const handleSubmit = async () => {\r\n    // Fetch images that belong to that username\r\n    const response = await fetch(`/api/images/${username}`);\r\n    const { images } = await response.json();\r\n    // Show only items that are in inventory, i.e. status === 'inventory'\r\n\r\n    const filteredImages = images.filter(\r\n      (image: any) => image.status === \"inventory\"\r\n    );\r\n    if (filteredImages.length === 0) {\r\n      setToastActive(true);\r\n      setImages([]);\r\n    } else {\r\n      setImages(filteredImages);\r\n    }\r\n  };\r\n  const toggleActive = () => {\r\n    setToastActive((active) => !active);\r\n  };\r\n  const toggleSuccessActive = () => {\r\n    setSuccessToastActive((active) => !active);\r\n  };\r\n  const toggleSoldToast = () => {\r\n    setSoldToastActive((active) => !active);\r\n  };\r\n  const toggleDisplayModal = () => {\r\n    setDisplayModal((displayModal) => !displayModal);\r\n  };\r\n  const handleUpdatePrice = (updatedPrice: string) => {\r\n    setUpdatedPrice(updatedPrice);\r\n  };\r\n  const handleSubmitChangePrice = async () => {\r\n    const response = await fetch(\"/api/update-price\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: currentImage.name,\r\n        username: currentImage.username,\r\n        updatedPrice,\r\n      }),\r\n    });\r\n    const { image: updatedImage } = await response.json();\r\n    const updatedImages = images.map((image: any) => {\r\n      if (\r\n        image.name === updatedImage.name &&\r\n        image.username === updatedImage.username\r\n      ) {\r\n        updatedImage.price = updatedPrice;\r\n        return updatedImage;\r\n      } else {\r\n        return image;\r\n      }\r\n    });\r\n    setImages(updatedImages);\r\n    toggleSuccessActive();\r\n    toggleDisplayModal();\r\n  };\r\n  const handleSellImage = async (image: any) => {\r\n    const response = await fetch(`/api/sell-image`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        imageId: image._id,\r\n      }),\r\n    });\r\n    const { image: returnImage } = await response.json();\r\n    if (returnImage) {\r\n      // Remove return image from displayed images\r\n      setImages(images.filter((image) => image._id !== returnImage._id));\r\n      toggleSoldToast();\r\n    }\r\n  };\r\n  const noImagesToast = toastActive ? (\r\n    <Toast\r\n      content=\"No images found by that username :(\"\r\n      onDismiss={toggleActive}\r\n      duration={2000}\r\n    />\r\n  ) : null;\r\n  const successToast = successToastActive ? (\r\n    <Toast\r\n      content=\"Successfully changed price!\"\r\n      onDismiss={toggleSuccessActive}\r\n      duration={2000}\r\n    />\r\n  ) : null;\r\n  const soldToast = soldToastActive ? (\r\n    <Toast\r\n      content=\"Successfully put up for sale!\"\r\n      onDismiss={toggleSoldToast}\r\n      duration={2000}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <Frame>\r\n      <br />\r\n      <Modal\r\n        open={displayModal}\r\n        onClose={toggleDisplayModal}\r\n        title={`Change price of ${currentImage?.name}`}\r\n      >\r\n        <Modal.Section>\r\n          <Form onSubmit={handleSubmitChangePrice}>\r\n            <FormLayout>\r\n              <TextField\r\n                value={updatedPrice}\r\n                onChange={handleUpdatePrice}\r\n                label=\"Price\"\r\n                type=\"number\"\r\n                helpText={<span>Enter in the updated price.</span>}\r\n              />\r\n              <Button submit disabled={updatedPrice.length === 0}>\r\n                Enter\r\n              </Button>\r\n            </FormLayout>\r\n          </Form>\r\n        </Modal.Section>\r\n      </Modal>\r\n      <Card title=\"Sell your images\" sectioned>\r\n        <Form onSubmit={handleSubmit}>\r\n          <FormLayout>\r\n            <TextField\r\n              value={username}\r\n              onChange={handleUsernameChange}\r\n              label=\"Username\"\r\n              type=\"text\"\r\n              helpText={\r\n                <span>\r\n                  Enter in the same username you chose when uploading your\r\n                  image.\r\n                </span>\r\n              }\r\n            />\r\n            <Button submit disabled={username.length === 0}>\r\n              Enter\r\n            </Button>\r\n          </FormLayout>\r\n        </Form>\r\n      </Card>\r\n      {images.map((image) => {\r\n        const { name, price, s3Url } = image;\r\n        return (\r\n          <MediaCard\r\n            title={name}\r\n            description={`Price: $${price}`}\r\n            key={name}\r\n            portrait\r\n            primaryAction={{\r\n              content: \"Sell this image\",\r\n              onAction: () => handleSellImage(image),\r\n            }}\r\n            secondaryAction={{\r\n              content: \"Change price\",\r\n              onAction: async () => {\r\n                setCurrentImage(image);\r\n                toggleDisplayModal();\r\n              },\r\n            }}\r\n          >\r\n            <img\r\n              src={s3Url}\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              style={{\r\n                objectFit: \"cover\",\r\n                objectPosition: \"center\",\r\n              }}\r\n            ></img>\r\n          </MediaCard>\r\n        );\r\n      })}\r\n      {noImagesToast}\r\n      {successToast}\r\n      {soldToast}\r\n    </Frame>\r\n  );\r\n};\r\nexport default SellImagePage;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Card, Toast, Frame, MediaCard, Banner } from \"@shopify/polaris\";\r\n\r\nconst BuyImagePage = () => {\r\n  const [successToastActive, setSuccessToastActive] = useState(false);\r\n  const [images, setImages] = useState<any[]>([]);\r\n\r\n  // Fetch items for sale\r\n  useEffect(() => {\r\n    (async () => {\r\n      const response = await fetch(\"/api/selling-images\");\r\n      const { images } = await response.json();\r\n      setImages(images);\r\n    })();\r\n  }, []);\r\n\r\n  const toggleSuccessActive = () => {\r\n    setSuccessToastActive((active) => !active);\r\n  };\r\n  const handleBuyImage = async (image: any) => {\r\n    const response = await fetch(`/api/buy-image`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        imageId: image._id,\r\n      }),\r\n    });\r\n    const { image: returnImage } = await response.json();\r\n    if (returnImage) {\r\n      // Remove return image from displayed images\r\n      setImages(images.filter((image) => image._id !== returnImage._id));\r\n      toggleSuccessActive();\r\n    }\r\n  };\r\n\r\n  const successToast = successToastActive ? (\r\n    <Toast\r\n      content=\"Successfully purchased!\"\r\n      onDismiss={toggleSuccessActive}\r\n      duration={2000}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <Frame>\r\n      <br />\r\n      <Card title=\"Buy an image\" sectioned />\r\n      {images.length === 0 ? (\r\n        <>\r\n          <br />\r\n          <Banner title=\"No images for sale\" status=\"warning\">\r\n            <p>\r\n              Currently, there are no images for sale. Try uploading an image\r\n              and selling it to see it here!\r\n            </p>\r\n          </Banner>\r\n        </>\r\n      ) : (\r\n        images.map((image) => {\r\n          const { name, price, s3Url, username } = image;\r\n          return (\r\n            <MediaCard\r\n              title={`${name}, by ${username}`}\r\n              description={`Price: $${price}`}\r\n              key={name}\r\n              portrait\r\n              primaryAction={{\r\n                content: \"Buy this image\",\r\n                onAction: () => handleBuyImage(image),\r\n              }}\r\n            >\r\n              <img\r\n                src={s3Url}\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                style={{\r\n                  objectFit: \"cover\",\r\n                  objectPosition: \"center\",\r\n                }}\r\n              ></img>\r\n            </MediaCard>\r\n          );\r\n        })\r\n      )}\r\n      {successToast}\r\n    </Frame>\r\n  );\r\n};\r\nexport default BuyImagePage;\r\n","import { useEffect, useState } from \"react\";\nimport { AppProvider, Card, Tabs, Page } from \"@shopify/polaris\";\nimport translations from \"@shopify/polaris/locales/en.json\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\nimport UploadImagePage from \"./components/UploadImagePage\";\nimport SellImagePage from \"./components/SellImagePage\";\nimport BuyImagePage from \"./components/BuyImagePage\";\n\nconst App = () => {\n  const [currentTab, setCurrentTab] = useState(0);\n  useEffect(() => {\n    // Get current tab by checking pathname\n    const tab = tabs.findIndex(\n      (tab) => tab.pathname === window.location.pathname\n    );\n    setCurrentTab(tab);\n  }, []);\n  const tabs = [\n    {\n      id: \"upload-image\",\n      pathname: \"/upload\",\n      content: \"Upload Image\",\n      accessibilityLabel: \"Upload an Image\",\n      panelId: \"upload-image-content-1\",\n    },\n    {\n      id: \"sell-image\",\n      pathname: \"sell\",\n      content: \"Sell\",\n      accessibilityLabel: \"Sell an Image\",\n      panelId: \"sell-image-content-1\",\n    },\n    {\n      id: \"buy-image\",\n      pathname: \"buy\",\n      content: \"Buy\",\n      accessibilityLabel: \"Buy an Image\",\n      panelId: \"buy-image-content-1\",\n    },\n  ];\n  const handleSelect = (tab: number) => {\n    setCurrentTab(tab);\n    window.location.pathname = tabs[tab].pathname;\n  };\n  return (\n    <AppProvider i18n={translations}>\n      <Router>\n        <Page title=\"ImageHub\">\n          <Card>\n            <Tabs tabs={tabs} selected={currentTab} onSelect={handleSelect} />\n          </Card>\n          <Switch>\n            <Route exact path=\"/upload\" component={UploadImagePage}></Route>\n            <Route exact path=\"/sell\" component={SellImagePage}></Route>\n            <Route exact path=\"/buy\" component={BuyImagePage}></Route>\n            <Redirect to=\"/upload\" />\n          </Switch>\n        </Page>\n      </Router>\n    </AppProvider>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"@shopify/polaris/dist/styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}